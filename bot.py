import telegram
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import get_main_keyboard, get_language_keyboard, get_level_keyboard, get_type_keyboard, get_genre_keyboard, get_recommendation_keyboard, get_details_keyboard
from database import get_book_recommendation
from utils import format_book
from telegram.ext import ContextTypes

async def start(update, context: ContextTypes.DEFAULT_TYPE):
    message = await update.message.reply_text(
        'üìö *–ü—Ä–∏–≤–µ—Ç!* –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: üëá\n'
        'üëâ –Ø–∑—ã–∫: -, –£—Ä–æ–≤–µ–Ω—å: -, –¢–∏–ø: -',
        reply_markup=get_main_keyboard(context), parse_mode='Markdown'
    )
    context.user_data['message_id'] = message.message_id

async def help_command(update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üìñ *–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?* –Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–Ω–∏–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π! üéâ\n'
        '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —è–∑—ã–∫, —É—Ä–æ–≤–µ–Ω—å –∏ —Ç–∏–ø –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.\n'
        '2Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è", –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n'
        '3Ô∏è‚É£ –ù–∞–∂–º–∏ "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É.\n'
        '4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ "–ï—â—ë" –∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n'
        '5Ô∏è‚É£ –ù–∞–∂–º–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–Ω–∏–≥–µ!\n'
        '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –ø–∏—à–∏ /start –∏ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! üòä',
        parse_mode='Markdown'
    )

async def about_project(update, context: ContextTypes.DEFAULT_TYPE):
    about_text = (
        'üìö *–û –ø—Ä–æ–µ–∫—Ç–µ* ‚ÑπÔ∏è\n'
        '–Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–Ω–∏–≥–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤! üéâ\n'
        '–ú–æ—è —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ —É–¥–æ–±–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫, —É—Ä–æ–≤–µ–Ω—å, —Ç–∏–ø –∫–Ω–∏–≥–∏ (—É—á–µ–±–Ω–∞—è –∏–ª–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è) –∏ –∂–∞–Ω—Ä, –∞ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n\n'
        'üì© *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*: –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∏—à–∏ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é! @littlefroggit\n\n'
        '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π! üòä'
    )
    await update.message.reply_text(about_text, parse_mode='Markdown')

async def button_handler(update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    message_id = context.user_data.get('message_id')
    chat_id = query.message.chat_id
    
    language = context.user_data.get('language', '-')
    level = context.user_data.get('level', '-')
    book_type = context.user_data.get('book_type', '-')
    genre = context.user_data.get('genre', '-')
    
    if query.data == 'select_language':
        await query.edit_message_text('üåê *–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è:*', reply_markup=get_language_keyboard(), parse_mode='Markdown')
    elif query.data == 'select_level':
        await query.edit_message_text('üéì *–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:*', reply_markup=get_level_keyboard(), parse_mode='Markdown')
    elif query.data == 'select_type':
        await query.edit_message_text('üìö *–ö–∞–∫—É—é –∫–Ω–∏–≥—É —Ç—ã –∏—â–µ—à—å?*', reply_markup=get_type_keyboard(), parse_mode='Markdown')
    elif query.data == 'recommend':
        missing = []
        if not context.user_data.get('language'):
            missing.append("—è–∑—ã–∫")
        if not context.user_data.get('level'): 
            missing.append("—É—Ä–æ–≤–µ–Ω—å")
        if not context.user_data.get('book_type'):
            missing.append("—Ç–∏–ø –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã")
        
        if missing:
            await query.edit_message_text(
                f'‚ùå *–û–π, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å {", ".join(missing)}!* üòä\n'
                f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else '-'}',
                reply_markup=get_main_keyboard(context), parse_mode='Markdown'
            )
        else:
            await query.edit_message_text('‚è≥ *–ò—â—É –∫–Ω–∏–≥–∏ –¥–ª—è —Ç–µ–±—è...*', reply_markup=None, parse_mode='Markdown')
            books = get_book_recommendation(language, level, book_type, genre)
            if not books:
                await query.edit_message_text(
                    'üìñ *–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏...* –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã! üòä\n'
                    f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else '-'}',
                    reply_markup=get_main_keyboard(context), parse_mode='Markdown'
                )
                return
            
            context.user_data['books'] = books
            context.user_data['book_index'] = 0
            
            first_book = format_book(books[0])
            
            keyboard = get_recommendation_keyboard(context)
            await query.edit_message_text(
                f'üéâ *–í–æ—Ç —Ç–≤–æ—è –ø–æ–¥–±–æ—Ä–∫–∞!* üìö\n'
                f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else '-'}\n'
                f'üìò *–ö–Ω–∏–≥–∞ 1 –∏–∑ {len(books)}*: {first_book}',
                reply_markup=keyboard, parse_mode='Markdown'
            )
            
    elif query.data.startswith('language_'):
        language = query.data.replace('language_', '')
        context.user_data['language'] = language
        if 'books' in context.user_data:
            del context.user_data['books']
        if 'book_index' in context.user_data:
            del context.user_data['book_index']
        await query.edit_message_text(
            f'üåç *–¢—ã –≤—ã–±—Ä–∞–ª —è–∑—ã–∫:* {language}\n' 
            f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else '-'}',
            reply_markup=get_main_keyboard(context), parse_mode='Markdown'
        )
        
    elif query.data.startswith('level_'):
        level = query.data.replace('level_', '')
        context.user_data['level'] = level
        if 'books' in context.user_data:
            del context.user_data['books']
        if 'book_index' in context.user_data:
            del context.user_data['book_index']
        await query.edit_message_text(
            f'üéì *–¢—ã –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å:* {level}\n'
            f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else '-'}',
            reply_markup=get_main_keyboard(context), parse_mode='Markdown'
        )
        
    elif query.data.startswith('type_'):
        book_type = query.data.replace('type_', '')
        context.user_data['book_type'] = book_type
        if 'books' in context.user_data:
            del context.user_data['books']
        if 'book_index' in context.user_data:
            del context.user_data['book_index']
        if book_type == "—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è":
            await query.edit_message_text(
                '*–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏):*',
                reply_markup=get_genre_keyboard(),
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                f'üìö *–¢—ã –≤—ã–±—Ä–∞–ª —Ç–∏–ø:* {book_type}\n'
                f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else '-'}',
                reply_markup=get_main_keyboard(context), parse_mode='Markdown'
            )
    
    elif query.data.startswith('genre_'):
        genre = query.data.replace('genre_', '')
        context.user_data['genre'] = genre
        if 'books' in context.user_data:
            del context.user_data['books']
        if 'book_index' in context.user_data:
            del context.user_data['book_index']
        await query.edit_message_text(
            f'üé® *–¢—ã –≤—ã–±—Ä–∞–ª –∂–∞–Ω—Ä:* {genre}\n'
            f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre}',
            reply_markup=get_main_keyboard(context), parse_mode='Markdown'
        )
        
    elif query.data == 'skip_genre':
        context.user_data['genre'] = None
        if 'books' in context.user_data:
            del context.user_data['books']
        if 'book_index' in context.user_data:
            del context.user_data['book_index']
        await query.edit_message_text(
            f'‚è≠Ô∏è *–ñ–∞–Ω—Ä –ø—Ä–æ–ø—É—â–µ–Ω.*\n'
            f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else "-"}',
            reply_markup=get_main_keyboard(context), parse_mode='Markdown'
        )
        
    elif query.data == 'back':
        await query.edit_message_text(
            'üìñ *–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –∫–Ω–∏–≥—É!* üòä\n'
            f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else "-"}',
            reply_markup=get_main_keyboard(context), parse_mode='Markdown'
        )
        
    elif query.data == 'reset':
        context.user_data.clear()
        await query.edit_message_text(
            'üîÑ *–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!* –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! üòä\n'
            'üëâ *–Ø–∑—ã–∫*: -, *–£—Ä–æ–≤–µ–Ω—å*: -, *–¢–∏–ø*: -, *–ñ–∞–Ω—Ä*: -',
            reply_markup=get_main_keyboard(context), parse_mode='Markdown'
        )
    
    elif query.data == 'help':
        help_text = (
            'üìñ *–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?* –Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–Ω–∏–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π! üéâ\n'
            '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —è–∑—ã–∫, —É—Ä–æ–≤–µ–Ω—å –∏ —Ç–∏–ø –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.\n'
            '2Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è", –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).\n'
            '3Ô∏è‚É£ –ù–∞–∂–º–∏ "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É.\n'
            '4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ "–ï—â—ë" –∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n'
            '5Ô∏è‚É£ –ù–∞–∂–º–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–Ω–∏–≥–µ!\n'
            '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –ø–∏—à–∏ /start –∏ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! üòä'
        )
        await query.edit_message_text(
            help_text,
            reply_markup=get_main_keyboard(context),
            parse_mode='Markdown'
        )
        
    elif query.data == 'about':
        about_text = (
            'üìö *–û –ø—Ä–æ–µ–∫—Ç–µ* ‚ÑπÔ∏è\n'
            '–Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–Ω–∏–≥–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤! üéâ\n'
            '–ú–æ—è —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ —É–¥–æ–±–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫, —É—Ä–æ–≤–µ–Ω—å, —Ç–∏–ø –∫–Ω–∏–≥–∏ (—É—á–µ–±–Ω–∞—è –∏–ª–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è) –∏ –∂–∞–Ω—Ä, –∞ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n\n'
            'üì© *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*: –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∏—à–∏ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é! @littlefroggit\n\n'
            '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π! üòä'
        )
        await query.edit_message_text(
            about_text,
            reply_markup=get_main_keyboard(context),
            parse_mode='Markdown'
        )
    
    elif query.data == 'details':
        books = context.user_data.get('books', [])
        index = context.user_data.get('book_index', 0)
        if not books or index < 0 or index >= len(books):
            await query.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
            return
        
        book = books[index]
        details, info_link = format_book(book, full_details=True)
        
        short_text = f'üìò *–ö–Ω–∏–≥–∞ {index + 1} –∏–∑ {len(books)}*: {format_book(book)}'
        context.user_data['short_text'] = short_text
        context.user_data['language'] = language
        context.user_data['level'] = level
        context.user_data['book_type'] = book_type
        
        await query.edit_message_text(
            details,
            reply_markup=get_details_keyboard(index, info_link),
            parse_mode='Markdown'
        )
        
    elif query.data.startswith('back_to_book_'):
        index = int(query.data.replace('back_to_book_', ''))
        context.user_data['book_index'] = index
        books = context.user_data.get('books', [])
        if not books or index < 0 or index >= len(books):
            await query.edit_message_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=get_recommendation_keyboard(context),
                parse_mode='Markdown'
            )
        
        short_text = context.user_data.get('short_text', '')
        language = context.user_data.get('language', '-')
        level = context.user_data.get('level', '-')
        book_type = context.user_data.get('book_type', '-')
        genre = context.user_data.get('genre', '-')
        
        full_text = (
            f'üéâ *–í–æ—Ç —Ç–≤–æ—è –ø–æ–¥–±–æ—Ä–∫–∞!* üìö\n'
            f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else "–ù–µ –≤—ã–±—Ä–∞–Ω"}\n'
            f'{short_text}'
        )
        
        keyboard = get_recommendation_keyboard(context)
        await query.edit_message_text(
            full_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    elif query.data in ['more', 'previous', 'back_to_start']:
        books = context.user_data.get('books', [])
        index = context.user_data.get('book_index', 0)
        max_index = len(books) - 1 if books else 0
        
        if query.data == 'more' and index < max_index:
            index += 1
            context.user_data['book_index'] = index
            book = format_book(books[index])
            keyboard = get_recommendation_keyboard(context)
            await query.edit_message_text(
                f'üìò *–ö–Ω–∏–≥–∞ {index + 1} –∏–∑ {len(books)}*: {book}',
                reply_markup=keyboard, parse_mode='Markdown'
            )
        elif query.data == 'previous' and index > 0:
            index -= 1
            context.user_data['book_index'] = index
            book = format_book(books[index])
            keyboard = get_recommendation_keyboard(context)
            await query.edit_message_text(
                f'üìò *–ö–Ω–∏–≥–∞ {index + 1} –∏–∑ {len(books)}*: {book}',
                reply_markup=keyboard, parse_mode='Markdown'
            )
        
        elif query.data == 'back_to_start':
            await query.edit_message_text(
                'üìö *–ü—Ä–∏–≤–µ—Ç!* –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã. –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –∫–Ω–∏–≥—É! üìñ\n'
                f'üëâ *–Ø–∑—ã–∫*: {language}, *–£—Ä–æ–≤–µ–Ω—å*: {level}, *–¢–∏–ø*: {book_type}, *–ñ–∞–Ω—Ä*: {genre if genre else "–ù–µ –≤—ã–±—Ä–∞–Ω"}',
                reply_markup=get_main_keyboard(context),
                parse_mode='Markdown'
            )
        
        elif query.data == 'more' and index >= max_index:
            await query.message.reply_text("üìö –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–∏–≥–∞ –≤ —Å–ø–∏—Å–∫–µ! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã! üòä")
        elif query.data == 'previous' and index <= 0:
            await query.message.reply_text("üìö –≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞ –≤ —Å–ø–∏—Å–∫–µ! üòä")

async def reset(update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        'üîÑ *–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!* –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! üòä\n'
        '–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã! üìñ',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å üìñ", callback_data='start')]]),
        parse_mode='Markdown'
    )

async def error_handler(update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")